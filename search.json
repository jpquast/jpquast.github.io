[
  {
    "objectID": "posts/2023-04-22-Falcoponics_test/index.html",
    "href": "posts/2023-04-22-Falcoponics_test/index.html",
    "title": "Falcoponics with Arugula (Eruca vesicaria)",
    "section": "",
    "text": "I recently came across an exciting Twitter post by Sebastian Cocioba, describing his implementation of a simple hydroponics system called Falcoponics.\n\n\nFalcoponics Testing out reusing 50mL tubes as standing hydroponic systems using rockwool and a 3D printed collar. Tobacco, brassica, and mimulus to test. I left space for a tubing line for automated watering too. Fun times ahead!Sebastian S. Cociobaü™Ñü•¶ (@ATinyGreenCell) April 13, 2023\n\n\nThe system is currently pretty simple and based on 50 mL Falcon tubes that are commonly used in the lab. The tubes can be easily washed after use and reused to grow plants instead of ending up in the trash. The tubes are fitted with two 3D printed collars that secure rockwool plugs for soil-free plant cultivation.\nThe great thing about this system is that there is a lot of potential for further development using Falcon tubes as subunits of a bigger modular system.\n\nMaterials\n\nRockwool plugs (20 x 27 mm)\n50 mL Falcon tubes\n3D printed collars (PETG or PLA)\nPlant seeds of your choice\n\n\n\nGetting Started\nI decided to give it a shot and bought some rockwool plugs from Amazon and took some old Falcon tubes from the lab that I washed thoroughly. It is obvious, but if you plan to eat the plants you are growing, make sure that you don‚Äôt use any Falcon tubes that contained dangerous or toxic chemicals.\n\nPrinting the Collars\nI got the 3D model for the collars from Sebastians printables site. I used a Prusa MK3S 3D printer to print the collars for the Falcon tubes. As material, both PLA and PETG work probably equaly well, but for my print, I used PETG.\nSince the collars are pretty simple and don‚Äôt need any support, I just used standard settings for this print.\n\nMaterial: PETG\nNozzle size: 0.4 mm\nLayer height: 0.15 mm\nBed temperature: 70¬∞C\nNozzle temperature: 230¬∞C\n\n\n\n\n3D printed collars (PETG)\n\n\n\n\nAssembly\nThe collar fits nicely into the Falcon tube and even has some space at the sides that can be used for tubing in the future.\n\n\n\nCollar in Falcon tube\n\n\nAs recommended by Sebastian I used gloves for the next steps.\nI carefully made the rockwool wet by letting cold water run through it and placed two Arugula (Eruca vesicaria) seeds into the little pocket on top. I chose Arugula seeds because these plants usually grow pretty well, and I still had some seeds that I harvested from the last plants I grew. Also, it‚Äôs tasty!\n\n\n\nTwo Arugula seeds in wet rockwool\n\n\nNext, I put the rockwool in between the collars and into the Falcon tube. I filled the tube with enough water to just touch the bottom of the rockwool.\n\n\n\nAssembled Falcon tube with rockwool\n\n\nBecause I do not have a grow light (yet!) I found a sunny location for the tubes.\n\n\n\n4 Falcon tubes with 2 Arugula seeds each (Day 0)\n\n\n\n\n\nDay 1\n\n\n\n\n\nDay 2\n\n\n\n\n\nDay 3\n\n\n\n\n\nDay 4\n\n\nOn day 4 I replaced the water with a commercial hydroponics nutrient solution.\n\n\nMaintenance\nEspecially in the beginning it is important to keep the rockwool wet since the plants do not yet have long enough roots to reach any water that is located below.\nAfter the plants germinated and developed small roots, I switched the water to a commercial hydroponics nutrient solution. I plan on testing my own growth solutions in the future."
  },
  {
    "objectID": "posts/23-04-23-google-apps-script/index.html",
    "href": "posts/23-04-23-google-apps-script/index.html",
    "title": "Automation with Google Apps Script",
    "section": "",
    "text": "Google Apps Script allows users to extend and connect the functionalities of various Google services, such as Google Sheets, Calendar, Gmail, and many more.\nYou can create macros, automate repetitive tasks, build custom add-ons, and integrate with external APIs. Google Apps Script is based on JavaScript and runs on Google servers, so there is no need to install any additional software.\nI came across Google Apps Script when I wanted to automatically update a Google Sheets document with data from a temperature and humidity sensor that I was building. So I decided to share my experience in a short tutorial on how to automate the process of logging data in Google Sheets."
  },
  {
    "objectID": "posts/23-04-23-google-apps-script/index.html#getting-started",
    "href": "posts/23-04-23-google-apps-script/index.html#getting-started",
    "title": "Automation with Google Apps Script",
    "section": "Getting Started",
    "text": "Getting Started\nYou can find a lot of information on how to use Google Apps Script by reading the official documentation. It gives lots of examples for all the different apps that can be automated.\nThe documentation specifically for the Sheets app can be found here.\nHaving a basic understanding of JavaScript is advantageous since the scripting language is based on it."
  },
  {
    "objectID": "posts/23-04-23-google-apps-script/index.html#creating-a-new-script",
    "href": "posts/23-04-23-google-apps-script/index.html#creating-a-new-script",
    "title": "Automation with Google Apps Script",
    "section": "Creating a New Script",
    "text": "Creating a New Script\nIn my project, I created a new spreadsheet that I named ‚Äúsensor_1‚Äù. To create a new script, navigate to Extensions -&gt; Apps Script.\n\nYou will find an empty example function.\n\nNext, you can give your new project a name that is easily identifiable. I gave it the same name as the spreadsheet."
  },
  {
    "objectID": "posts/23-04-23-google-apps-script/index.html#creating-functions",
    "href": "posts/23-04-23-google-apps-script/index.html#creating-functions",
    "title": "Automation with Google Apps Script",
    "section": "Creating Functions",
    "text": "Creating Functions\nIn order to get started with Apps Script we can create a few simple example functions that help us understand what we are able to do.\n\nLogging Information from Spreadsheet\nFirst, we are going to automatically log information that is present in our spreadsheet. I created some example data that we can play with.\n\n\n\nExample Data\n\n\nNext, we can write a simple function that allows us to log the data from the spreadsheet.\n\n\n\nLogging function\n\n\nWe use a few important methods in this first example.\n\nSpreadsheetApp.getActiveSheet(): Get the sheet that is currently visible and in focus in the user‚Äôs browser window. You can use several methods on the output in order to get information about the sheet or to modify it.\n\nBelow, you can see an example function that would return the name of the currently active sheet using the getName() method.\nfunction getActiveSheetName() {\n  var sheet = SpreadsheetApp.getActiveSheet();\n  var sheetName = sheet.getName();\n  Logger.log(\"The name of the active sheet is \" + sheetName);\n}\n\ngetDataRange(): Returns a Range object that represents the rectangular grid of cells containing data in a sheet.\ngetValues(): Get a 2D array with values in a sheet. This method is used on a Range object.\n\nFor us, the 2D array (data) has the following structure:\n[[Temperature, Humidity], [20.0, 50.0], [21.0, 60.0], [20.0, 55.0], [22.0, 40.0]]\nTherefore, we can simply loop over the length (data.length) of the array, always accessing the first (data[i][0]; Temperature) and second (data[i][1]; Humidity) element of each subarray. In order to ignore the first row that contains the column labels, we are starting with index i = 1.\n\nLogger.log(): Write to the log.\n\nWhen you want to run your function for the first time (by pressing the ‚ÄúRun‚Äù button), you will be asked to authorise your script first.\n\n\n\nAuthorisation request\n\n\nYou will get a few dialogues telling you that you should not trust the developers app and that it has not yet been verified with Google. You can ignore this since you are the author of the script and you (should) know what you are doing.\n\n\nAfter giving permission, the script should run and you should get the following output:\n\n\n\nLogged data\n\n\nGreat! Now you have seen how we can use the log to track information in the spreadsheet.\n\n\nAdding Information to Spreadsheet\nNext, we would actually like to add information to the existing sheet. Running the code below will successfully add another row to the sheet containing a temperature of 25 and humidity of 70.\nfunction add_temp_hum() {\n  var sheet = SpreadsheetApp.getActiveSheet();\n  sheet.appendRow([25, 70]);\n}\n\nappendRow(): Values to insert after the last row in the sheet. Provide information as an array.\n\n\n\nSelecting a Sheet or Spreadsheet\nInstead of getting the currently active sheet, we can also specify which sheet we want to add information to by providing its name.\nfunction manipulateSheetByName() {\n  var sheetName = \"Sheet1\";\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);\n  sheet.getRange(\"A7\").setValue(22);\n}\nAs you can see, we use getActiveSpreadsheet() instead of getActiveSheet() here.\ngetActiveSpreadsheet() returns a reference to the active Google Sheets spreadsheet, while getActiveSheet() returns a reference to the active sheet within that spreadsheet. With getActiveSpreadsheet(), you can perform operations on the entire spreadsheet, such as getting the URL or adding a new sheet. With getActiveSheet(), you can perform operations on the active sheet, such as reading or writing data to specific cells.\n\ngetSheetByName(): Returns a sheet with the given name.\ngetRange(): Selects a cell.\nsetValue(): Sets the value of a given cell.\n\nIf you want to be even more specific about which spreadsheet you refer to, you can use its ID, as shown below. You can extract a spreadsheet ID from its URL by locating the string of characters between ‚Äú/d/‚Äù and ‚Äú/edit‚Äù in the URL. For example, in the URL ‚Äúhttps://docs.google.com/spreadsheets/d/123sdaf124asdf/edit#gid=0‚Äù, the spreadsheet ID is ‚Äú123sdaf124asdf‚Äù.\nfunction openById() {\n  var sheet_id = \"YOUR_SHEET_ID_HERE\";\n  var spreadsheet = SpreadsheetApp.openById(sheet_id);\n  var sheet = spreadsheet.getSheetByName(\"Sheet1\");\n  var data = sheet.getDataRange().getValues();\n  Logger.log(data);\n}\n\nopenById(): Open a sheet based on its ID.\n\n\n\nLogging the Current Date\nFor each of our temperature and humidity readings, we also want to record the current date and time of the reading. Let‚Äôs first modify our spreadsheet to include columns for this information.\n With the code below, you can simply add a new row to the sheet that contains the date and time of execution as well as temperature and humidity data.\nfunction recordData() {\n  var sheet_id = \"YOUR_SHEET_ID_HERE\";\n  var spreadsheet = SpreadsheetApp.openById(sheet_id);\n  var sheet = spreadsheet.getSheetByName(\"Sheet1\");\n  var rowData = [];\n  var d = new Date();\n    rowData[0] = d; // Date in column A\n    rowData[1] = d.toLocaleTimeString([], {timeZone: 'Europe/Zurich'}); // Timestamp in column B\n    rowData[2] = 22; // Temperature in column C\n    rowData[3] = 50; // Humidity in column D\n  sheet.appendRow(rowData); // Add data to the end of the table\n}\n\nnew Date(): Is a constructor function that creates a new Date object with the current date.\n\nWe save the date as the first element of the rowData array that we later use to append the sheet. Next, we want to extract the time component of the Date object and save it as the second element of the rowData array.\n\ntoLocaleTimeString(): Extracts the time of a Date object. Use the timeZone argument to specify a specific time zone. Specifying the time zone might not be necessary.\n\n\n\n\nUpdated Sheet"
  },
  {
    "objectID": "posts/23-04-23-google-apps-script/index.html#creating-a-web-app",
    "href": "posts/23-04-23-google-apps-script/index.html#creating-a-web-app",
    "title": "Automation with Google Apps Script",
    "section": "Creating a Web App",
    "text": "Creating a Web App\nThe ability to deploy Google Apps Script as web apps is a powerful feature that allows for interaction with any user. In our case, we want to allow our microcontroller, which records temperature and humidity data, to interact with the application to log data in a spreadsheet.\nYou can create a user interface with an HTML file or just let the user interact with it through its URL.\nWhen you create a web app in Google Apps Script and deploy it, Google generates a unique deployment ID for the web app. You can then use this deployment ID to create a URL in the format script.google.com/macros/s/{deployment_id}/exec. This URL points to the web app and can be shared with anyone who needs to access the app.\nYou can deploy your application simply by navigating to Deploy -&gt; New deployment.\n\nSelect Web app as the deployment type.\n\nNext, provide a description and change the access to Anyone if you want anyone to be able to access the app without login. In our case, this is necessary because the microcontroller is not able to complete a login form. It just directly interacts with the app through the URL.\n\n\n\n\n\n\n\nWho should have access?\n\n\n\nBe careful with who you allow access to your app. If someone has the unique deployment ID of your app and it is open to anyone, they can interact with it. For apps that are meant to be accessed by humans, it is probably best to restrict access and require a login with a Google account. If you use it to log data like me, it is best not to share your deployment ID anywhere because otherwise other people would be able to log data into your spreadsheet."
  },
  {
    "objectID": "posts/23-04-23-google-apps-script/index.html#interacting-with-the-web-app",
    "href": "posts/23-04-23-google-apps-script/index.html#interacting-with-the-web-app",
    "title": "Automation with Google Apps Script",
    "section": "Interacting with the Web App",
    "text": "Interacting with the Web App\nYou can interact with the web app through its URL, creating GET and POST requests. In our case, we will include temperature and humidity information in the URL by letting the microcontroller create a GET request.\nThe URL created would look something like this: https://script.google.com/macros/s/{deployment_id}/exec?temperature=23&humidity=50\nWe can write a simple app that will help us understand what is going on when a user sends this GET request. We create a function doGet() with an e (event) argument, which will contain information about a GET request made by the user of the app. It is important that you name the function doGet for GET requests or doPost to handle POST requests.\nfunction doGet(e) {\n  Logger.log(e);\n}\nIf you deploy this as a web app and use the link above to provide temperature and humidity information, you will get the following output in the log:\n{queryString=temperature=23&humidity=50, parameters={humidity=[50], temperature=[23]}, parameter={temperature=23, humidity=50}, contentLength=-1.0, contextPath=}\nYou can access the log under Executions.\n\n\n\nWeb app log\n\n\nThe parameters and parameter objects contain key/value pairs of the request parameters. parameters contains an array of values for each key. Since we only provide one temperature and humidity value, the array only contains one value. parameter, in contrast, contains only the first value for parameters that have multiple values.\nThis means that this query, https://script.google.com/macros/s/{deployment_id}/exec?temperature=23&temperature=25&humidity=50&humidity=54, would yield the following output:\n{contentLength=-1.0, queryString=temperature=23&temperature=25&humidity=50&humidity=54, parameter={temperature=23, humidity=50}, parameters={humidity=[50, 54], temperature=[23, 25]}, contextPath=}\nYou can access the different properties of e directly by referring to them, for example, like this: e.parameters.\nIn order to access every element for every parameter that was sent, you can use two nested loops, as shown below.\nfunction doGet(e) {\n  Logger.log(e);  // Logs the entire event object to the console\n  Logger.log(e.parameters);  // Logs the parameters of the event object to the console\n  for (var param in e.parameters) {  // Loops through each parameter in the event object\n    Logger.log('Outer for loop, param=' + param);  // Logs the current parameter in the outer for loop\n    var values = e.parameters[param];  // Assigns the value(s) of the current parameter to a variable named \"values\"\n    for (var i in values) {  // Loops through each value in the \"values\" variable\n      Logger.log('Inner for loop, ' + param + ':' + values[i]);  // Logs the current parameter and its corresponding value(s) to the console\n    }\n  }\n  return ContentService.createTextOutput(\"Success\");  // Returns a success message to the user\n}\n\nreturn: Supply a value that should be returned by the function. After return is reached in a function, it will stop its execution at that point and ignore any code below.\nContentService.createTextOutput(): Create a text output that can be shown on screen when provided to return.\n\nIf you want to test an app, you can test deploy it instead of making a new deployment. This will generate a slightly different URL containing dev instead of exec. Otherwise, you can use it exactly the same way as usual to provide parameters.\n\n\n\nMake a test deployment\n\n\nJust go ahead and send multiple temperature and humidity values at once, like shown in the URL above, and then check the log of your test deployment."
  },
  {
    "objectID": "posts/23-04-23-google-apps-script/index.html#saving-values-from-a-get-request-into-a-sheet",
    "href": "posts/23-04-23-google-apps-script/index.html#saving-values-from-a-get-request-into-a-sheet",
    "title": "Automation with Google Apps Script",
    "section": "Saving values from a GET request into a sheet",
    "text": "Saving values from a GET request into a sheet\nFor my temperature and humidity sensor, the microcontroller never sends more than one temperature and humidity reading at a time. Therefore, it is possible to use e.parameter instead of e.parameters, which makes dealing with the data a bit easier.\nWhen putting everything from above together, I came up with the following function:\nfunction doGet(e) {\n  // Log data\n  Logger.log(e); \n  Logger.log(e.parameter);\n  Logger.log('Temperature: ' + e.parameter.temperature);\n  Logger.log('Humidity: ' + e.parameter.humidity);\n\n  // Define return values\n  var result = \"\";\n  if (typeof e.parameter.temperature != 'undefined' && typeof e.parameter.humidity != 'undefined') {\n    // If both temperature and humidity are defined\n    result = \"Success!\";\n  }\n  if (typeof e.parameter.temperature == 'undefined') {\n    // If temperature is undefined\n    result = 'Temperature undefined.\\n';\n  }\n  if (typeof e.parameter.humidity == 'undefined') {\n    // If humidity is undefined\n    result = result + 'Humidity undefined.';\n  }\n\n  // Access Sheet\n  var sheet_id = \"YOUR_SHEET_ID_HERE\";\n  var spreadsheet = SpreadsheetApp.openById(sheet_id);\n  var sheet = spreadsheet.getSheetByName(\"Sheet1\");\n  var rowData = [];\n  var d = new Date(); // Get datetime\n\n    rowData[0] = d; // Date in column A\n    rowData[1] = d.toLocaleTimeString([], {timeZone: 'Europe/Zurich'}); // Timestamp in column B\n    rowData[2] = e.parameter.temperature; // Temperature in column C\n    rowData[3] = e.parameter.humidity; // Humidity in column D\n\n  sheet.appendRow(rowData); // Add data to the end of the table\n  \n  return ContentService.createTextOutput(result);\n}\n\ntypeof: Checks the type of a variable. If a parameter was not provided in the URL, its type is undefined in this case.\n\nThis function will save all the data that was provided to the spreadsheet. If temperature and humidity are missing, then only the date and time when a GET request was sent are saved to the spreadsheet."
  },
  {
    "objectID": "posts/2023-04-16-using-launchd/index.html",
    "href": "posts/2023-04-16-using-launchd/index.html",
    "title": "Automation with launchd",
    "section": "",
    "text": "If you enjoy automating things and work on a macOS system, launchd is a tool you must know! But what is it, and how does it work?\nlaunchd is a process on macOS that manages the execution and scheduling of background processes (daemons). It replaces older time-based job schedulers for Unix systems such as cron. In short, it is necessary if you want to schedule the execution of your scripts at specific times or intervals.\nI came across launchd when I wanted to automate downloading and deleting data from a Google Sheets file to which a microcontroller saves temperature and humidity measurements. Over time, the document would fill up, and I had to manually download and delete the data to make space for more sensor readings. Therefore, I wrote an R script that takes care of this for me. In order to automate the execution of this script, I needed launchd."
  },
  {
    "objectID": "posts/2023-04-16-using-launchd/index.html#getting-started",
    "href": "posts/2023-04-16-using-launchd/index.html#getting-started",
    "title": "Automation with launchd",
    "section": "Getting Started",
    "text": "Getting Started\nIt is pretty simple to use launchd if you know how. To set it up, you‚Äôll need to create a LaunchAgent property list file (.plist) in XML format. This file describes the process or program you want to launch, its arguments, and when and how often to execute it.\nIn this short tutorial, we will create a simple .plist file that executes a script at a certain time during the day. There are a lot more customisation options and things you can do with launchd that I won‚Äôt go into. If you are curious, you can read up on them using the following terminal command.\nman launchd.plist"
  },
  {
    "objectID": "posts/2023-04-16-using-launchd/index.html#creating-a-.plist-file",
    "href": "posts/2023-04-16-using-launchd/index.html#creating-a-.plist-file",
    "title": "Automation with launchd",
    "section": "Creating a .plist file",
    "text": "Creating a .plist file\nThe overall structure of a .plist file is always identical. Below you can find the file that I have created for my specific task, which I called com.jpq.download_and_upload_data.plist.\n    &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n    &lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\"\n      \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n    &lt;plist version=\"1.0\"&gt;\n    &lt;dict&gt;\n        &lt;key&gt;Label&lt;/key&gt;\n        &lt;string&gt;com.jpq.download_and_upload_data&lt;/string&gt;\n        &lt;key&gt;ProgramArguments&lt;/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;/usr/local/bin/Rscript&lt;/string&gt;\n            &lt;string&gt;/Users/user/Documents/sensor_data/download_and_upload_data.R&lt;/string&gt;\n        &lt;/array&gt;\n        &lt;key&gt;StartCalendarInterval&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;Hour&lt;/key&gt;\n            &lt;integer&gt;13&lt;/integer&gt;\n            &lt;key&gt;Minute&lt;/key&gt;\n            &lt;integer&gt;0&lt;/integer&gt;\n        &lt;/dict&gt;\n    &lt;/dict&gt;\n    &lt;/plist&gt;\nYou can see that there are three main &lt;key&gt; fields in the file that specify Label, ProgramArguments and StartCalendarInterval.\n\n\n\n\n\n\n\n&lt;key&gt;\nDescription\n\n\n\n\nLabel\nUniquely identifies the job. Usually the file name. It has the structure com.creator.FileName.\n\n\nProgramArguments\nAn array of strings which contain the tokenised arguments and the program to run.\n\n\nStartCalendarInterval\nContains a dictionary with &lt;key&gt;/integer fields that specify the time that the script should be executed at.\n\n\n\n\nProgramArguments\nProgramArguments specify what should be executed how. You would specify the execution of the script in the same way that you would also execute it in the terminal, with the exception that you would tokenise (split up) the prompt.\nIn our .plist file above, I use the Rscript interpreter that is usually located at /usr/local/bin/Rscript to execute my R script located at /Users/user/Documents/sensor_data/download_and_upload_data.R\nIf you have a shell script .sh file that you want to execute directly, you can use Program instead of ProgramArguments and provide the path to the script directly.\n&lt;key&gt;Program&lt;/key&gt;\n  &lt;string&gt;/Users/user/Scripts/script.sh&lt;/string&gt;\nIf you want to run a shell script for the first time, make sure that you have permission by using chmod in the terminal.\nchmod u+x script.sh\n\n\nStartCalendarInterval\nThe StartCalendarInterval can set a specific time point at which the script should be executed. The below example executes the script on the 15th of July at 13:30 if this day is a Sunday.\n&lt;key&gt;StartCalendarInterval&lt;/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;Day&lt;/key&gt;\n        &lt;integer&gt;15&lt;/integer&gt;\n        &lt;key&gt;Hour&lt;/key&gt;\n        &lt;integer&gt;13&lt;/integer&gt;\n        &lt;key&gt;Minute&lt;/key&gt;\n        &lt;integer&gt;30&lt;/integer&gt;\n        &lt;key&gt;Month&lt;/key&gt;\n        &lt;integer&gt;7&lt;/integer&gt;\n        &lt;key&gt;Weekday&lt;/key&gt;\n        &lt;integer&gt;0&lt;/integer&gt;\n    &lt;/dict&gt;\nIf you simply leave out some of these keys from the dictionary, they are treated as a wildcard, meaning they are not considered for the execution of the job.\n\n\n\n\n\n\nNote\n\n\n\nOne important advantage of using launchd over cron is that if a job cannot be executed at its designated time, it will instead be executed at the next possible time. In addition, if a job cannot be run at multiple scheduled times, it will be executed only once at the next possible time.\n\n\nIf you want to execute a script, for example, every 10 minutes, you can use StartInterval instead:\n&lt;key&gt;StartInterval&lt;/key&gt;\n    &lt;integer&gt;600&lt;/integer&gt;"
  },
  {
    "objectID": "posts/2023-04-16-using-launchd/index.html#file-location",
    "href": "posts/2023-04-16-using-launchd/index.html#file-location",
    "title": "Automation with launchd",
    "section": "File Location",
    "text": "File Location\nOnce you have written your .plist file you will have to save it in the appropriate directory. There are multiple different options:\n\n\n\n\n\n\n\nFolder\nUsage\n\n\n\n\n/System/Library/LaunchDaemons\nApple-supplied system daemons\n\n\n/System/Library/LaunchAgents\nApple-supplied agents that apply to all users on a per-user basis\n\n\n/Library/LaunchDaemons\nThird-party system daemons\n\n\n/Library/LaunchAgents\nThird-party agents that apply to all users on a per-user basis\n\n\n~/Library/LaunchAgents\nThird-party agents that apply only to the logged-in user\n\n\n\nAgents are always associated with the logged-on user, meaning the scripts are restricted to only a specific user, while Deamons are run under the root user and thus run for everyone.\nSince my script specifically saves data in a folder associated with my user, it is better to use an Agent and not a Daemon. Therefore, I chose the lowest option as my location for the .plist file: /Users/user/Library/LaunchAgents/com.jpq.download_data_from_sheets.plist"
  },
  {
    "objectID": "posts/2023-04-16-using-launchd/index.html#loading-an-agent",
    "href": "posts/2023-04-16-using-launchd/index.html#loading-an-agent",
    "title": "Automation with launchd",
    "section": "Loading an Agent",
    "text": "Loading an Agent\nAfter you have saved your .plist file in one of the appropriate locations, you have to load it using the launchctl command in the terminal.\nlaunchctl load /Users/user/Library/LaunchAgents/com.jpq.download_data_from_sheets.plist\n\n\n\n\n\n\nNote\n\n\n\nIf you want to see all loaded jobs, you can use launchctl list in the terminal. In order to stop a job, use launchctl unload file/path. Using launchctl start JobLabel will run the job immediately and not only when scheduled.\n\n\nThis is it! Now our script will be executed automatically at the specified time points."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to my website! My name is Jan-Philipp, but most people call me JP. I am a biochemist and currently pursuing my PhD in the Picotti Lab at ETH in Zurich, Switzerland. In my research I study protein-metal interactions using mass spectrometry and structural proteomics methods.\nThis website and blog serves as a platform for me to share tutorials and the various projects I am working on in my free time. In particular I enjoy automating processes both in the real world and digitally through robots and code. In my DIY projects I like combining computer-aided design (CAD) with 3D printing (both FDM and DLP), microcontroller based simple electronic circuits, and coding.\nThrough my PhD I have found a passion for the programming language R. I have contributed to the development of several R packages and are the maintainer of the packages protti and ggplate.\nIf you are curious and have any questions or would like to discuss my work further please feel free to reach out to me. I am always open to collaborate on new and interesting projects!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "JP's Projects",
    "section": "",
    "text": "Falcoponics with Arugula (Eruca vesicaria)\n\n\n\nHydroponics\n\n\nFDM-printing\n\n\n\n\n\n\n\nJan-Philipp Quast\n\n\nApr 22, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nAutomation with Google Apps Script\n\n\n\nGoogle Apps Script\n\n\ncoding\n\n\n\n\n\n\n\nJan-Philipp Quast\n\n\nApr 22, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAutomation with launchd\n\n\n\ncoding\n\n\nLaunchd\n\n\n\n\n\n\n\nJan-Philipp Quast\n\n\nApr 16, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  }
]